
--creating table to input the data

CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
song_key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
song_mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness decimal(8,7) NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL )

--Making sure there are 50 entries in the data
SELECT count(*)
FROM bit_db.Spotifydata

--Finding the average popularity and danceability by artist and track. Ordering the popularity in descending order. 
SELECT 
    artist_name,
    track_name,
    avg(popularity),
    avg(danceability)
FROM bit_db.Spotifydata
GROUP BY artist_name, track_name
ORDER BY avg(popularity) DESC;

--Looking at the top 10 popular artists
SELECT
    artist_name,
    avg(popularity)
FROM bit_db.Spotifydata
GROUP BY artist_name
ORDER BY avg(popularity) desc
LIMIT 10;

--Looking at the shortest song in duration by artist and track name
SELECT 
    artist_name,
    track_name,
    min(duration_ms)
FROM bit_db.Spotifydata
GROUP BY artist_name, track_name
ORDER BY min(duration_ms) asc
LIMIT 1;

--Looking at the longest song in duration by artist and track name
SELECT 
    artist_name,
    track_name,
    max(duration_ms)
FROM bit_db.Spotifydata
GROUP BY artist_name, track_name
ORDER BY max(duration_ms) DESC
LIMIT 1;

--Looking at the top ten artists and track by highest energy. 
SELECT 
    artist_name,
    track_name,
    avg(energy)
FROM bit_db.Spotifydata
GROUP BY artist_name, track_name
ORDER BY avg(energy) DESC
LIMIT 10;

--Looking at the average for all numerical categories
SELECT 
    avg(popularity),
    avg(danceability),
    avg(energy),
    avg(song_key),
    avg(loudness),
    avg(song_mode),
    avg(speechiness),
    avg(acousticness),
    avg(instrumentalness),
    avg(liveness),
    avg(valence),
    avg(tempo),
    avg(duration_ms),
    avg(time_signature)
FROM bit_db.Spotifydata

--Calculate the average popularity for the artists in the Spotify data table. Then, for every artist with an average popularity of 90 or above, show their name, their average popularity, and label them as a “Top Star”.
WITH popularity_average_CTE AS (
SELECT 
    s.artist_name,
    AVG(s.popularity) AS average_popularity
FROM SpotifyData s 
GROUP BY s.artist_name
)
 
SELECT  artist_name,
        average_popularity,
        'Top Star' AS tag
FROM popularity_average_CTE
WHERE average_popularity>=90;